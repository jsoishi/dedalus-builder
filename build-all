#! /bin/bash
# Copyright (c) 2017, Peter K. G. Williams.
#
# This file is part of Dedalus, which is free software distributed
# under the terms of the GPLv3 license.  A copy of the license should
# have been included in the file 'LICENSE.txt', and is also available
# online at <http://www.gnu.org/licenses/gpl-3.0.html>.

function die () {
    echo >&2 "error:" "$@"
    exit 1
}

stack=$(cd $(dirname $0) && pwd)/stack

if [ ! -f $stack/.setup-complete ] ; then
    die "software stack not yet set up; please run ./initialize first"
fi

if [ ! -f $stack/.configuration ] ; then
    die "software stack not yet set up; please run ./configure first"
fi

set -e

$stack/bin/python3 support/check-environment.py $stack/.environment.pkl

export DEDALUS_BUILDER_SETUP="$stack/bin/dedalus_builder_setup $stack/.environment.pkl $stack/.configuration"

platform=$($stack/bin/conda info |grep 'platform :' |sed -e 's/.*platform : //')

source $stack/.configuration
export use_system_blas # these need to be exported now to take effect in the Jinja templating
export system_blas_dir
export use_system_mpi

packages=(system-libs)

if [ $use_system_blas -ne 0 ] ; then
    # Build custom copies of the packages that depend sensitively on the system
    # BLAS implementation.
    packages+=(numpy scipy)
else
    # conda-forge's `openblas` depends on `libgfortran` which is only
    # available in `defaults`, not purely `conda-forge`, so we repackage an
    # appropriate version while `defaults` and `conda-forge` are substantially
    # out of sync with regards to compiler versions.
    packages+=(libgfortran)
fi

if [ $use_system_mpi -ne 0 ] ; then
    # Custom copies of packages that depend sensitively on the system MPI implementation.
    packages+=(mpi4py)
else
    # Same deal as above, except with `mpich` depending on `libgcc`
    packages+=(libgcc)
fi

packages+=(
    fftw
    dedalus
)

for name in "${packages[@]}" ; do
    vers=$(grep 'set version =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    build_number=$(grep 'set build_number =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    build_string=$(grep 'set build_string =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    pkg="$stack/conda-bld/$platform/$name-$vers-$build_number$build_string.tar.bz2"

    if [ "$pkg" -nt "$name/meta.yaml" ] ; then
       echo "skipping $name: package exists and is newer than $name/meta.yaml"
    else
        $stack/bin/conda build --override-channels -c conda-forge $name
    fi
done

echo
echo "You can now create a new Python environment with Dedalus and IPython by running"
echo "\"./install-fresh <prefix>\", or install Dedalus into an existing environment"
echo "by running \"./install-into <prefix>\"."
echo
