#! /bin/bash
# Copyright (c) 2017, Peter K. G. Williams.
#
# This file is part of Dedalus, which is free software distributed
# under the terms of the GPLv3 license.  A copy of the license should
# have been included in the file 'LICENSE.txt', and is also available
# online at <http://www.gnu.org/licenses/gpl-3.0.html>.

function die () {
    echo >&2 "error:" "$@"
    exit 1
}

stack=$(cd $(dirname $0) && pwd)/stack

if [ ! -f $stack/.setup-complete ] ; then
    die "software stack not yet set up; please run ./initialize first"
fi

# Arg parsing.
while [ $# -gt 0 ] ; do
    arg="$1"
    shift

    case "$arg" in
        --with-blas=*)
            system_blas_dir=$(echo "$arg" |sed -e s/--with-blas=//)
            ;;
        --ignore-system-mpi)
            ignore_system_mpi=1
            ;;
        -h|--help)
            echo "usage: $0 [--with-blas=BLAS-LIB-DIR]"
            exit 0
            ;;
        *)
            die "unrecognized option \"$arg\""
            ;;
    esac
done

# Basic validation.

if [ -n "$PYTHONPATH" ] ; then
    die "refusing to proceed: you must unset the \$PYTHONPATH environment variable"
fi

if [ -n "$PYTHONHOME" ] ; then
    die "refusing to proceed: you must unset the \$PYTHONHOME environment variable"
fi

echo "# dedalus-build configuration" >$stack/.configuration

# MPI. If `mpicc` is available, we will use the system MPI setup; otherwise
# we will use Anaconda/conda-forgeâ€™s bundled version, which uses a basic
# mpich installation.

if type mpicc >/dev/null 2>&1 ; then
    mpicc_exists=1
fi
if [ ! -z "$mpicc_exists" ] && [ -z "$ignore_system_mpi" ] ; then
    # mpicc is in $PATH => assume the user has a system MPI they want to use.
    echo "MPI: using system installation"
    echo "  mpicc:" $(which mpicc)

    if ! type mpicxx >/dev/null 2>&1 ; then
        die "refusing to proceed: no MPI C++ compiler \"mpicxx\" in \$PATH"
    fi

    if ! type mpif90 >/dev/null 2>&1 ; then
        die "refusing to proceed: no MPI Fortran compiler \"mpif90\" in \$PATH"
    fi

    echo 'use_system_mpi=1' >>$stack/.configuration
else
    if [ -z "$ignore_system_mpi" ] ; then
        echo "MPI: using Anaconda installation (because no \"mpicc\" in \$PATH)"
    else
        echo "MPI: using Anaconda installation (because --ignore-system-mpi is set)"
    fi
    echo 'use_system_mpi=0' >>$stack/.configuration
fi

# BLAS-type libraries.

if [ -z "$system_blas_dir" ] ; then
    echo "BLAS: using Anaconda installation (because no \"--with-blas=LIBDIR\" argument was given)"
    echo "use_system_blas=0" >>$stack/.configuration
else
    echo "BLAS: using system installation"
    echo "  libdir: $system_blas_dir"
    echo "  note: this requires compiling Numpy and Scipy, which will take a while"
    echo "use_system_blas=1" >>$stack/.configuration
    echo "system_blas_dir=$system_blas_dir" >>$stack/.configuration
fi

# Cache the validated environment so that we can complain if anything changes later.

rm -f $stack/.environment.pkl
$stack/bin/python support/check-environment.py $stack/.environment.pkl

# Guide the user.

echo
echo "If you are happy with the configuration, now run ./compile to compile the software."
echo
