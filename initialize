#! /bin/bash
# Copyright (c) 2017, Peter K. G. Williams.
#
# This file is part of Dedalus, which is free software distributed
# under the terms of the GPLv3 license.  A copy of the license should
# have been included in the file 'LICENSE.txt', and is also available
# online at <http://www.gnu.org/licenses/gpl-3.0.html>.

miniconda_version=4.3.21 # visit https://repo.continuum.io/miniconda/ to look for updates
python_major_version=3

function die () {
    echo >&2 "error:" "$@"
    exit 1
}

stack=$(cd $(dirname $0) && pwd)/stack

if [ -d $stack ] ; then
    die "cannot proceed: software stack directory $stack already exists"
fi

if [ -n "$PYTHONPATH" ] ; then
    die "refusing to proceed: you must unset the \$PYTHONPATH environment variable"
fi

if [ -n "$PYTHONHOME" ] ; then
    die "refusing to proceed: you must unset the \$PYTHONHOME environment variable"
fi

# OK to go.

echo "Installing software stack in directory \"$stack\"."

# CPU?

unamem=$(uname -m)
(( $? )) && die "could not detect CPU type with \"uname -m\""

case $unamem in
    x86_64) arch=x86_64 ;;
    i?86*) arch=x86 ;;
    amd64) arch=x86_64 ;; # right?
    ia64) arch=x86_64 ;;
    x86pc) arch=x86 ;;
    *) die "unrecognized/unsupported CPU type \"$unamem\"" ;;
esac

# OS?

unames=$(uname -s)
(( $? )) && die "could not detect OS type with \"uname -s\""

case $unames in
    Linux) os=Linux ;;
    Darwin) os=MacOSX ;;
    *) die "unrecognized/unsupported OS type \"$unames\"" ;;
esac

# Download and run the installer. Use curl since OS X doesn't have wget by default.

if [ ! -f miniconda.sh ] ; then
    url="http://repo.continuum.io/miniconda"
    url="$url/Miniconda${python_major_version}-${miniconda_version}-${os}-${arch}.sh"

    echo "Downloading $os/$arch base installer ..."
    echo
    curl -kL "$url" >miniconda.sh
    (( $? )) && die "failed to download $url"

    echo
fi

echo "Running the Miniconda installer ..."
echo
bash miniconda.sh -b -p "$stack" 2>&1 |sed -e 's/^/    /'
(( $? )) && die "Miniconda installer reported an error"

# Now update and install packages.

echo
echo "Syncing with conda-forge and installing dev tools ..."
echo
$stack/bin/conda update -y --override-channels -c conda-forge --all || exit 1
$stack/bin/conda install -y --override-channels -c conda-forge conda-build || exit 1

# A hack so that our build scripts can import user environment variables
# without needing their own build-time Python installs.

cat <<EOF >$stack/bin/dedalus_builder_setup
#! /bin/bash
exec $stack/bin/python $stack/../support/export-environment.py "\$@"
EOF
chmod +x $stack/bin/dedalus_builder_setup

# All done. Guide the user.

touch $stack/.setup-complete

echo
echo "Now run ./configure to validate your compilation settings."
echo
